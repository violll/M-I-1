
#
# VPython shell for planetary orbit program assignment
#
from visual import *
#
# Define the display window.
#
scene = display(title = "Earth's Orbit", width = 500, height = 500, range = 3.e11)
#
scene.autoscale = 0              # Turn off auto scaling of display.
#
# Define the Sun and the Earth objects.
#
sun = sphere(color = color.yellow)
mercury = sphere(color = color.magenta)
venus = sphere(color = color.yellow)
earth  = sphere(color = color.blue)
mars = sphere(color = color.red)
jupiter = sphere(color = color.orange)
#
# Set up the constants and initial conditions that will be needed by 
# the program. Work these out in advance and enter them here.
#
G = 6.67e-11                            # Gravitational constant (Nm**2/kg**2)
sun.pos = vector(0,0,0)         # Initial Sun position (m)
mercury.pos = vector(5.8e10,0,0)
venus.pos = vector(1.08e11,0,0)
earth.pos = vector(1.5e11,0,0)       # Initial Earth position (m)
mars.pos = vector(2.28e11,0,0)
jupiter.pos = vector(7.78e1,0,0)
#
sun.mass  = 2e30                    # Mass of the Sun   (kg)
mercury.mass = 3.285e23
venus.mass = 4.867e24
earth.mass = 6e24                  # Mass of the Earth (kg)
mars.mass = 6.39e23
jupiter.mass = 1.898e27
#
mercury.velocity = 
venus.velocity = 
earth.velocity = vector(0,30000,0)  # Initial velocity of the Earth (m/s)
mars.velocity = 
jupiter.velocity =  
#
dt = 1e4                         # time increment in seconds (choose a sensible value)
#
total = 0                       # initialize the total elapsed time
#
# Scale factors to control how big the Earth and Sun are drawn in the display.
#
sun.scale   = 1e1
earth.scale = 5e2
#
sun.radius   = 7.e8 * sun.scale
mercury.radius = 2.44e6 * earth.scale
venus.radius =6e6 * earth.scale
earth.radius = 6.4e6 * earth.scale
mars.radius = 3.4e6 * earth.scale
jupiter.radius = 69.9e6 * earth.scale
#
# Initialize the momentum and path of the Earth.
#
mercury.momentum = vector(mercury.mass * mag(mercury.velocity) * norm(mercury.velocity))
venus.momentum = vector(venus.mass * mag(venus.velocity) * norm(venus.velocity))
earth.momentum = vector(earth.mass * mag(earth.velocity) * norm(earth.velocity))       # momentum of the earth
mars.momentum = vector(mars.mass * mag(mars.velocity) * norm(mars.velocity))
jupiter.momentum = vector(jupiter.mass * mag(jupiter.velocity) * norm(jupiter.velocity))
#
mercury.trail = curve(color = mercury.color)
venus.trail = curve(color = venus.color)
earth.trail = curve(color = earth.color)           # define the Earth's path
mars.trail = curve(color = mars.color)
jupiter.trail = curve(color = jupiter.color)
#
mercury.trail.append(pos = mercury.pos)
venus.trail.append(pos = venus.pos)
earth.trail.append(pos = earth.pos)                # set initial position of the Earth 
mars.trail.append(pos = mars.pos)
jupiter.trail.append(pos = jupiter.pos)
#
# Define an arrow that points from the origin to the Earth.
#
mercury.arrow = 
venus.arrow = 
earth.arrow = arrow(pos = (0,0,0), axis = earth.pos, color = earth.color, shaftwidth = 1e6)
mars.arrow =
 
#
tmax = 3600 * 24 * 365.25                         # number of seconds in a year
#
# Start of the loop.
#
while (total < tmax):
#
    rate(100)         # limit the loop to a maximum of 100 times per second.
#
# Fill in the next 3 lines with the correct expressions
#
mercurysun.force
mercuryvenus.force
mercuryearth.force
mercurymars.force
mercuryjupiter.force
mercurytotal.force = mercurysun.force + mercuryvenus.force + mercuryearth.force + mercurymars.force + mercuryjupiter.force
mercury.momentum
mercury.pos

venussun.force
venusmercury.force = -mercuryvenus.force
venusearth.force = 
venusmars.force =
venusjupiter.force = 
venustotal.force = venussun.force + venusmercury.force + venusearth.force + venusmars.force + venusjupiter.force
venus.momentum
venus.pos

    earthsun.force = -G*sun.mass*earth.mass / mag2(earth.pos)*norm(earth.pos)   # compute the force that the Sun exerts on the Earth.
    earthmercury.force = -mercuryearth.force
    earthvenus.force = -venusearth.force
    earthmars.force = 
    earthjupiter.force = 
    earthtotal.force = earthsun.force + earthmercury.force + earthvenus.force + earthmars.force + earthjupiter.force
    earth.momentum = earth.momentum + dt*earth.force             # update the Earth's momentum
    earth.pos = earth.pos + dt * earth.momentum / earth.mass      # update the Earth's position
#

Mars.force
Mars.momentum
Mars.pos

Jupiter.force
Jupiter.momentum
Jupiter.pos

    mercury.trail.append(pos = mercury.pos)
venus.trail.append(pos = venus.pos)
earth.trail.append(pos = earth.pos)               
mars.trail.append(pos = mars.pos)
jupiter.trail.append(pos = jupiter.pos)

Mercury.arrow.axis = mercury.pos
Venus.arrow.axis = venus.pos    
earth.arrow.axis = earth.pos             # move the Earth's position arrow
Mars.arrow.axis = mars.pos
Jupiter.arrow.axis = jupiter.pos
#
    total = total + dt                   # increment the time
#
# print this when the loop is done.
#
print earth.pos
print 'All done.'
