#
# VPython shell for planetary orbit program assignment
#
from visual import *
#
# Define the display window.
#
scene = display(title = "Earth's Orbit", width = 500, height = 500, range = 3.e11)
#
scene.autoscale = 0              # Turn off auto scaling of display.
#
# Define the Sun and the Earth objects.
#
sun = sphere(color = color.yellow)
mercury = sphere(color = color.magenta)
venus = sphere(color = color.yellow)
earth  = sphere(color = color.blue)
mars = sphere(color = color.red)
jupiter = sphere(color = color.orange)
#
# Set up the constants and initial conditions that will be needed by 
# the program. Work these out in advance and enter them here.
#
G = 6.67e-11                            # Gravitational constant (Nm**2/kg**2)
sun.pos = vector(0,0,0)         # Initial Sun position (m)
# Initial planet position (m)
mercury.pos = vector(5.8e10,0,0)
venus.pos = vector(1.08e11,0,0)
earth.pos = vector(1.5e11,0,0)       
mars.pos = vector(2.28e11,0,0)
jupiter.pos = vector(7.78e11,0,0)
#
sun.mass  = 2e30                    # Mass of the Sun   (kg)
# Mass of the planets (kg)
mercury.mass = 3.285e23
venus.mass = 4.867e24
earth.mass = 6e24                  
mars.mass = 6.39e23
jupiter.mass = 1.898e27
#
# Initial velocity of the planets (m/s)
mercury.velocity = vector(0,47400,0)
venus.velocity = vector(0,35000,0)
earth.velocity = vector(0,30000,0)  
mars.velocity = vector(0,24100,0)
jupiter.velocity = vector(0,13100,0)
#
dt = 1e4                         # time increment in seconds (choose a sensible value)
#
total = 0                       # initialize the total elapsed time
#
# Scale factors to control how big the Earth and Sun are drawn in the display.
#
sun.scale   = 1e1
earth.scale = 5e2
#
sun.radius   = 7.e8 * sun.scale
mercury.radius = 2.44e6 * earth.scale
venus.radius =6e6 * earth.scale
earth.radius = 6.4e6 * earth.scale
mars.radius = 3.4e6 * earth.scale
jupiter.radius = 69.9e6 * earth.scale
#
# Initialize the momentum and path of the Earth.
#
# momentum of the planets
mercury.momentum = vector(mercury.mass * mag(mercury.velocity) * norm(mercury.velocity))
venus.momentum = vector(venus.mass * mag(venus.velocity) * norm(venus.velocity))
earth.momentum = vector(earth.mass * mag(earth.velocity) * norm(earth.velocity))       
mars.momentum = vector(mars.mass * mag(mars.velocity) * norm(mars.velocity))
jupiter.momentum = vector(jupiter.mass * mag(jupiter.velocity) * norm(jupiter.velocity))
#
# define the planets' path
mercury.trail = curve(color = mercury.color)
venus.trail = curve(color = venus.color)
earth.trail = curve(color = earth.color)           
mars.trail = curve(color = mars.color)
jupiter.trail = curve(color = jupiter.color)
#
# set initial position of the planets
mercury.trail.append(pos = mercury.pos)
venus.trail.append(pos = venus.pos)
earth.trail.append(pos = earth.pos)                
mars.trail.append(pos = mars.pos)
jupiter.trail.append(pos = jupiter.pos)
#
#forces calculated on Mercury
#mercurysun.force = -G*mercury.mass*sun.mass/mag2(mercury.pos)*norm(mercury.pos)
#mercuryvenus.force = -G*mercury.mass*venus.mass/mag2(venus.pos-mercury.pos)*norm(mercury.pos)
#mercuryearth.force = -G*mercury.mass*earth.mass/mag2(earth.pos-mercury.pos)*norm(mercury.pos)
#mercurymars.force = -G*mercury.mass*mars.mass/mag2(mars.pos-mercury.pos)*norm(mercury.pos)
#mercuryjupiter.force = -G*mercury.mass*jupiter.mass/mag2(jupiter.pos-mercury.pos)*norm(mercury.pos)
#mercurytotal.force = mercurysun.force + mercuryvenus.force + mercuryearth.force + mercurymars.force + mercuryjupiter.force

#forces calculated on Venus
#venussun.force = -G*venus.mass*sun.mass/mag2(venus.pos)*norm(venus.pos)
#venusmercury.force = -mercuryvenus.force
#venusearth.force = -G*venus.mass*earth.mass/mag2(earth.pos-venus.pos)*norm(venus.pos)
#venusmars.force =-G*venus.mass*mars.mass/mag2(mars.pos-venus.pos)*norm(venus.pos)
#venusjupiter.force = -G*venus.mass*earth.mass/mag2(jupiter.pos-venus.pos)*norm(venus.pos)
#venustotal.force = venussun.force + venusmercury.force + venusearth.force + venusmars.force + venusjupiter.force

# forces calculated on Earth
#earthsun.force = -G*sun.mass*earth.mass / mag2(earth.pos)*norm(earth.pos)
#earthmercury.force = -mercuryearth.force
#earthvenus.force = -venusearth.force
#earthmars.force = -G*earth.mass*mars.mass / mag2(mars.pos - earth.pos)*norm(earth.pos)
#earthjupiter.force = -G*earth.mass*mars.mass / mag2(jupiter.pos - earth.pos)*norm(earth.pos)
#earthtotal.force = earthsun.force + earthmercury.force + earthvenus.force + earthmars.force + earthjupiter.force

# forces calculated on Mars
#marssun.force = -G*sun.mass*mars.mass / mag2(mars.pos)*norm(mars.pos)
#marsmercury.force = -mercurymars.force
#marsvenus.force = -venusmars.force
#marsearth.force = -earthmars.force
#marsjupiter.force = -G*mars.mass*jupiter.mass / mag2(jupiter.pos - mars.pos)*norm(mars.pos)
#marstotal.force = marssun.force + marsmercury.force + marsvenus.force + marsearth.force + marsjupiter.force

# forces calculated on Jupiter
#jupitersun.force = -G*sun.mass*jupiter.mass / mag2(jupiter.pos)*norm(earth.pos)
#jupitermercury.force = -mercuryjupiter.force
#jupitervenus.force = -venusjupiter.force
#jupiterearth.force = -earthjupiter.force
#jupitermars.force = -marsjupiter.force
#jupitertotal.force = jupitersun.force + jupitermercury.force + jupitervenus.force + jupiterearth.force + jupitermars.force

# Define an arrow that points from the origin to the Earth.
tmax = 3600 * 24 * 365.25                         # number of seconds in a year
#
# Start of the loop.
#
while (total < tmax):
#
    rate(100)         # limit the loop to a maximum of 100 times per second.
#
# Fill in the next 3 lines with the correct expressions
#
    #forces calculated on Mercury
    #mercurysun.force = -G*mercury.mass*sun.mass/mag2(mercury.pos)*norm(mercury.pos)
    #mercuryvenus.force = -G*mercury.mass*venus.mass/mag2(venus.pos-mercury.pos)*norm(mercury.pos)
    #mercuryearth.force = -G*mercury.mass*earth.mass/mag2(earth.pos-mercury.pos)*norm(mercury.pos)
    #mercurymars.force = -G*mercury.mass*mars.mass/mag2(mars.pos-mercury.pos)*norm(mercury.pos)
    #mercuryjupiter.force = -G*mercury.mass*jupiter.mass/mag2(jupiter.pos-mercury.pos)*norm(mercury.pos)
    #mercurytotal.force = mercurysun.force + mercuryvenus.force + mercuryearth.force + mercurymars.force + mercuryjupiter.force
    mercury.force = (-G*mercury.mass*sun.mass/mag2(mercury.pos)*norm(mercury.pos)) + (-G*mercury.mass*venus.mass/mag2(venus.pos-mercury.pos)*norm(mercury.pos)) + (-G*mercury.mass*earth.mass/mag2(earth.pos-mercury.pos)*norm(mercury.pos)) + (-G*mercury.mass*mars.mass/mag2(mars.pos-mercury.pos)*norm(mercury.pos)) + (-G*mercury.mass*jupiter.mass/mag2(jupiter.pos-mercury.pos)*norm(mercury.pos))

    #updating momentum and position of Mercury
    mercury.momentum = mercury.momentum + dt*mercury.force
    mercury.pos = mercury.pos + dt * mercury.momentum / mercury.mass

    #forces calculated on Venus
    #venussun.force = -G*venus.mass*sun.mass/mag2(venus.pos)*norm(venus.pos)
    #venusmercury.force = -mercuryvenus.force
    #venusearth.force = -G*venus.mass*earth.mass/mag2(earth.pos-venus.pos)*norm(venus.pos)
    #venusmars.force =-G*venus.mass*mars.mass/mag2(mars.pos-venus.pos)*norm(venus.pos)
    #venusjupiter.force = -G*venus.mass*jupiter.mass/mag2(jupiter.pos-venus.pos)*norm(venus.pos)
    #venustotal.force = venussun.force + venusmercury.force + venusearth.force + venusmars.force + venusjupiter.force
    venus.force = (-G*venus.mass*sun.mass/mag2(venus.pos)*norm(venus.pos)) + (G*mercury.mass*venus.mass/mag2(venus.pos-mercury.pos)*norm(mercury.pos)) + (-G*venus.mass*earth.mass/mag2(earth.pos-venus.pos)*norm(venus.pos)) + (-G*venus.mass*mars.mass/mag2(mars.pos-venus.pos)*norm(venus.pos)) + (-G*venus.mass*jupiter.mass/mag2(jupiter.pos-venus.pos)*norm(venus.pos))

    #updating momentum and position of Venus
    venus.momentum = venus.momentum + dt*venus.force
    venus.pos = venus.pos + dt * venus.momentum / venus.mass

    # forces calculated on Earth
    #earthsun.force = -G*sun.mass*earth.mass / mag2(earth.pos)*norm(earth.pos)
    #earthmercury.force = -mercuryearth.force
    #earthvenus.force = -venusearth.force
    #earthmars.force = -G*earth.mass*mars.mass / mag2(mars.pos - earth.pos)*norm(earth.pos)
    #earthjupiter.force = -G*earth.mass*jupiter.mass / mag2(jupiter.pos - earth.pos)*norm(earth.pos)
    #earthtotal.force = earthsun.force + earthmercury.force + earthvenus.force + earthmars.force + earthjupiter.force
    earth.force = (-G*sun.mass*earth.mass / mag2(earth.pos)*norm(earth.pos)) + (G*mercury.mass*earth.mass/mag2(earth.pos-mercury.pos)*norm(mercury.pos)) + (G*venus.mass*earth.mass/mag2(earth.pos-venus.pos)*norm(venus.pos)) + (-G*earth.mass*mars.mass / mag2(mars.pos - earth.pos)*norm(earth.pos)) + (-G*earth.mass*mars.mass / mag2(jupiter.pos - earth.pos)*norm(earth.pos))
    
    # updating Earth's momentum and position
    earth.momentum = earth.momentum + dt*earth.force
    earth.pos = earth.pos + dt * earth.momentum / earth.mass
    
    # forces calculated on Mars
    #marssun.force = -G*sun.mass*mars.mass / mag2(mars.pos)*norm(mars.pos)
    #marsmercury.force = -mercurymars.force
    #marsvenus.force = -venusmars.force
    #marsearth.force = -earthmars.force
    #marsjupiter.force = -G*mars.mass*jupiter.mass / mag2(jupiter.pos - mars.pos)*norm(mars.pos)
    #marstotal.force = marssun.force + marsmercury.force + marsvenus.force + marsearth.force + marsjupiter.force
    mars.force = (-G*sun.mass*mars.mass / mag2(mars.pos)*norm(mars.pos)) + (-G*mercury.mass*mars.mass/mag2(mars.pos-mercury.pos)*norm(mars.pos - mercury.pos)) + (-G*venus.mass*mars.mass/mag2(mars.pos-venus.pos)*norm(mars.pos-venus.pos)) + (-G*earth.mass*mars.mass / mag2(mars.pos - earth.pos)*norm(mars.pos-earth.pos)) + (-G*mars.mass*jupiter.mass / mag2(jupiter.pos - mars.pos)*norm(jupiter.pos - mars.pos))
     
    # updating Mars' momentum and position
    mars.momentum = mars.momentum + dt * mars.force
    mars.pos = mars.pos + dt * mars.momentum / mars.mass

    # forces calculated on Jupiter
    #jupitersun.force = -G*sun.mass*jupiter.mass / mag2(jupiter.pos)*norm(earth.pos)
    #jupitermercury.force = -mercuryjupiter.force
    #jupitervenus.force = -venusjupiter.force
    #jupiterearth.force = -earthjupiter.force
    #jupitermars.force = -marsjupiter.force
    #jupitertotal.force = jupitersun.force + jupitermercury.force + jupitervenus.force + jupiterearth.force + jupitermars.force
    jupiter.force = (-G*sun.mass*jupiter.mass / mag2(jupiter.pos)*norm(jupiter.pos)) + (-G*mercury.mass*jupiter.mass/mag2(jupiter.pos-mercury.pos)*norm(jupiter.pos-mercury.pos)) + (-G*venus.mass*jupiter.mass/mag2(jupiter.pos-venus.pos)*norm(jupiter.pos-venus.pos)) + (-G*earth.mass*jupiter.mass / mag2(jupiter.pos - earth.pos)*norm(jupiter.pos-earth.pos)) + (-G*mars.mass*jupiter.mass / mag2(jupiter.pos - mars.pos)*norm(jupiter.pos-mars.pos))


    # updating Jupiter's momentum and position
    jupiter.momentum = jupiter.momentum + dt*jupiter.force
    jupiter.pos = jupiter.pos + dt * jupiter.momentum / jupiter.mass
    
    # updating trails of the planets
    mercury.trail.append(pos = mercury.pos)
    venus.trail.append(pos = venus.pos)
    earth.trail.append(pos = earth.pos)        
    mars.trail.append(pos = mars.pos)
    jupiter.trail.append(pos = jupiter.pos)
    #
    total = total + dt                   # increment the time
    #
# print this when the loop is done.
#
print earth.pos
print 'All done.'
